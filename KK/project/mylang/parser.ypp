/* For more infomation, look at official bison 
 * (c++ parser section) documentation */
%{
#include <iostream>
#include <string>
#include "driver.hpp"

/* Syntax error function */
void yy::parser::error(const location_type& l, const std::string& msg) {
	driver.error(l, msg);
}
%}

%language "c++"
%locations

%define api.value.type variant
%define api.token.constructor
%define parse.trace

/* Better error messages */
%define parse.error verbose

/* Pass to flex */
%code requires {
class Driver;
}
%param { Driver &driver }

/* Token definitions */
%token
	eof_token 0 "end of file"	
	print_token "print"          
	sqr_lparen_token "["            
	sqr_rparen_token "]"            
    plus_token "+"    
    minus_token "-"   
	mul_token "*"                   
    newline_token "\n"
    lparen_token "("  
    rparen_token ")"  
    assign_token "="  
    eq_token "=="  
    lt_token "<"      
    gt_token ">"      
    leq_token "<="      
    geq_token ">="      
    semicol_token ";" 
    comma_token ","   


/* No union needed, we are using variant */
%type <std::vector<int>> Lista Niz_br

%token <std::string> id_token "identifier";
%token <int> int_token "number";

%left "+" "-"
%left "*" "/"

%%
/* Consider maybe using std::swap instead of std::move everywhere 
 * because there is discussion about potential move problems with 
 * bison variant types */

Program : Naredba Program {}
        | Naredba {}
        ;

Naredba : "\n" {}

%%

int main(int argc, char * argv[])
{
	bool read_from_file = false;
	Driver driver;

	int i;
	for (i = 1; i < argc; i++) {
		if (argv[i] == std::string ("-p")) {
			driver.trace_parsing = true;
		} else if (argv[i] == std::string ("-s")) {
			driver.trace_scanning = true;
		} else {
			read_from_file = true;
		}
	}

	if (read_from_file)
		driver.parse(argv[i-1]);
	else
		driver.parse();

	return 0;
}
